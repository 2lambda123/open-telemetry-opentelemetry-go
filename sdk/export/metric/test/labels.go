// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package test // import "go.opentelemetry.io/otel/sdk/export/metric/test"

import (
	"go.opentelemetry.io/otel/api/core"
	"go.opentelemetry.io/otel/sdk/export/metric"
)

type labels struct {
	encoderID int64
	encoded   string
	slice     metric.LabelSlice
}

var _ metric.Labels = &labels{}

// NewSimpleLabels builds a Labels object, consisting of an ordered
// set of labels in a provided slice and a unique encoded
// representation generated by the passed encoder.
func NewSimpleLabels(encoder metric.LabelEncoder, kvs ...core.KeyValue) metric.Labels {
	l := &labels{
		encoderID: encoder.ID(),
		slice:     kvs,
	}
	l.encoded = encoder.Encode(l.Iter())
	return l
}

// Iter is a part of an implementation of the Labels interface.
func (l *labels) Iter() metric.LabelIterator {
	return l.slice.Iter()
}

// Encoded is a part of an implementation of the Labels interface.
func (l *labels) Encoded(encoder metric.LabelEncoder) string {
	if l.encoderID == encoder.ID() {
		return l.encoded
	}
	return encoder.Encode(l.Iter())
}

// Unique returns a unique value usable as a map key.
func (l *labels) Unique() interface{} {
	return l.encoded
}

// Convenience function that creates a slice of labels from the passed
// iterator. The iterator is set up to start from the beginning before
// creating the slice.
func IteratorToSlice(iter metric.LabelIterator) []core.KeyValue {
	l := iter.Len()
	if l == 0 {
		return nil
	}
	slice := make([]core.KeyValue, 0, l)
	for iter.Next() {
		slice = append(slice, iter.Label())
	}
	return slice
}
