// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Package metric provides an implementation of the OpenTelemetry metrics SDK.

See https://opentelemetry.io/docs/concepts/signals/metrics/ for information
about the concept of OpenTelemetry metrics and
https://opentelemetry.io/docs/concepts/components/ for more information
about OpenTelemetry SDKs.

The entry point for the metric package is the MeterProvider. It is the
object that all API calls use to create Meters, instruments, and ultimately
make metric measurements. Also, it is an object that should be used to
control the life-cycle (start, flush, and shutdown) of the SDK.

A MeterProvider needs to be configured to export the measured data, this is
done by configuring it with a Reader implementation (using the WithReader
MeterProviderOption). Readers take two forms: ones that push to an endpoint
(NewPeriodicReader), and ones that an endpoint pulls from. See
[go.opentelemetry.io/otel/exporters] for exporters that can be used as
or with these Readers.

Each Reader, when registered with the MeterProvider, can be augmented with a
View. Views allow users that run OpenTelemetry instrumented code to modify
the generated data of that instrumentation.

The data generated by a MeterProvider needs to include information about its
origin. A MeterProvider needs to be configured with a Resource, using the
WithResource MeterProviderOption, to include this information. This Resource
should be used to describe the unique runtime environment instrumented code
is being run on. That way when multiple instances of the code are collected
at a single endpoint their origin is decipherable.

See [go.opentelemetry.io/otel/metric] for more information about
the metric API.

# Experimental

The metric SDK contains features that have not yet stabilized in the
OpenTelemetry specification. These features are added to the OpenTelemetry Go
metric SDK prior to stabilization in the specification so that users can start
experimenting with them and provide feedback.

These feature may change in backwards incompatible ways as feedback is applied.

Experimental features do not fall within the scope of the OpenTelemetry Go
versioning and stability policy. These features may be removed or modified in
successive version releases, including patch versions.

When an experimental feature is promoted to a stable feature, a migration path
will be included in the changelog entry of the release. There is no guarantee
that any environment variable feature flags that enabled the experimental
feature will be supported by the stable version. If they are supported, they
may be accompanied with a deprecation notice stating a timeline for the removal
of that support.

# Cardinality Limit (experimental)

The cardinality limit is the hard limit on the number of metric streams that
can be collected for a single instrument.

This experimental feature can be enabled by setting the
OTEL_GO_X_CARDINALITY_LIMIT environment value. The value must be an integer
value. All other values are ignored. If the value set is less than or equal
to 0, no limit will be applied.

This is how you can set the cardinality limit to 2000:

	export OTEL_GO_X_CARDINALITY_LIMIT=2000

This is how you can set an infinite cardinality limit
(functionally equivalent to disabling the feature):

	export OTEL_GO_X_CARDINALITY_LIMIT=-1

This is how you can disable the cardinality limit.

	unset OTEL_GO_X_CARDINALITY_LIMIT

# Exemplars (experimental)

A sample of measurements made may be exported directly as a set of exemplars.

This experimental feature can be enabled by setting the OTEL_GO_X_EXEMPLAR
environment variable. The value of must be the case-insensitive string of
"true" to enable the feature. All other values are ignored.

Exemplar filters are a supported. The exemplar filter applies to all
measurements made. They filter these measurements, only allowing certain
measurements to be passed to the underlying exemplar reservoir.

To change the exemplar filter from the default "trace_based" filter set
the OTEL_METRICS_EXEMPLAR_FILTER environment variable.
The value must be the case-sensitive string defined by
the [OpenTelemetry specification].

  - "always_on": allows all measurements
  - "always_off": denies all measurements
  - "trace_based": allows only sampled measurements

All values other than these will result in the default, "trace_based",
exemplar filter being used.

[OpenTelemetry specification]: https://github.com/open-telemetry/opentelemetry-specification/blob/a6ca2fd484c9e76fe1d8e1c79c99f08f4745b5ee/specification/configuration/sdk-environment-variables.md#exemplar
*/
package metric // import "go.opentelemetry.io/otel/sdk/metric"
