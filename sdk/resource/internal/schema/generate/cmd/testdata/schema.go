// Code generated by "go.opentelemetry.io/otel/sdk/resource/internal/schema/gen"; DO NOT EDIT.
// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package schema

import (
	ast10 "go.opentelemetry.io/otel/schema/v1.0/ast"
	types10 "go.opentelemetry.io/otel/schema/v1.0/types"
	"go.opentelemetry.io/otel/schema/v1.1/ast"
	"go.opentelemetry.io/otel/schema/v1.1/types"
)

var Schemas = map[string]*ast.Schema{
	"https://opentelemetry.io/schemas/1.21.0": {
		FileFormat: "1.1.0",
		SchemaURL:  "https://opentelemetry.io/schemas/1.21.0",
		Versions: map[types.TelemetryVersion]ast.VersionDef{
			"1.20.0": {},
			"1.21.0": {
				All: ast10.Attributes{
					Changes: []ast10.AttributeChange{
						{
							RenameAttributes: &ast10.RenameAttributes{
								AttributeMap: map[string]string{
									"Bar": "bar",
								},
							},
						},
						{
							RenameAttributes: &ast10.RenameAttributes{
								AttributeMap: map[string]string{
									"foo": "Foo",
								},
							},
						},
					},
				},
				Resources: ast10.Attributes{
					Changes: []ast10.AttributeChange{
						{
							RenameAttributes: &ast10.RenameAttributes{
								AttributeMap: map[string]string{
									"one": "ONE",
									"two": "TWO",
								},
							},
						},
					},
				},
				Spans: ast10.Spans{
					Changes: []ast10.SpansChange{
						{
							RenameAttributes: &ast10.AttributeMapForSpans{
								ApplyToSpans: []types10.SpanName{
									"span0",
									"span1",
								},
								AttributeMap: map[string]string{
									"attr0": "Attr0",
									"attr1": "Attr1",
								},
							},
						},
						{
							RenameAttributes: &ast10.AttributeMapForSpans{
								AttributeMap: map[string]string{
									"net.host.name": "server.address",
									"net.host.port": "server.port",
								},
							},
						},
					},
				},
				SpanEvents: ast10.SpanEvents{
					Changes: []ast10.SpanEventsChange{
						{
							RenameEvents: &ast10.RenameSpanEvents{
								EventNameMap: map[string]string{
									"event0": "Event0",
									"event1": "Event1",
								},
							},
							RenameAttributes: &ast10.RenameSpanEventAttributes{
								ApplyToSpans: []types10.SpanName{
									"spanA",
									"spanB",
								},
								ApplyToEvents: []types10.EventName{
									"Event0",
									"Event1",
								},
								AttributeMap: map[string]string{
									"foo": "bar",
								},
							},
						},
						{
							RenameAttributes: &ast10.RenameSpanEventAttributes{
								AttributeMap: map[string]string{
									"bar": "foo",
								},
							},
						},
					},
				},
				Logs: ast10.Logs{
					Changes: []ast10.LogsChange{
						{
							RenameAttributes: &ast10.RenameAttributes{
								AttributeMap: map[string]string{
									"baz": "qux",
									"foo": "bar",
								},
							},
						},
					},
				},
				Metrics: ast.Metrics{
					Changes: []ast.MetricsChange{
						{
							RenameMetrics: map[types10.MetricName]types10.MetricName{
								"utilization": "recent_utilization",
							},
						},
						{
							RenameMetrics: map[types10.MetricName]types10.MetricName{
								"foo": "bar",
							},
							RenameAttributes: &ast10.AttributeMapForMetrics{
								ApplyToMetrics: []types10.MetricName{
									"bar",
								},
								AttributeMap: map[string]string{
									"up": "down",
								},
							},
							Split: &ast.SplitMetric{
								ApplyToMetric: "old",
								ByAttribute:   "a",
								MetricsFromAttributes: map[types10.MetricName]types.AttributeValue{
									"baz": "qux",
									"foo": "bar",
								},
							},
						},
					},
				},
			},
		},
	},
}
