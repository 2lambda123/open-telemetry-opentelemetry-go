// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "./internal/main.go"; DO NOT EDIT.

package unit // import "go.opentelemetry.io/otel/metric/unit"

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestYotta(t *testing.T) {
	u := Yotta(New("1", WithPrintSymbol("1")))
	assert.Equal(t, "Y1", u.Code(), "code")
	assert.Equal(t, "Y1", u.String(), "print symbol")
}

func TestZetta(t *testing.T) {
	u := Zetta(New("1", WithPrintSymbol("1")))
	assert.Equal(t, "Z1", u.Code(), "code")
	assert.Equal(t, "Z1", u.String(), "print symbol")
}

func TestExa(t *testing.T) {
	u := Exa(New("1", WithPrintSymbol("1")))
	assert.Equal(t, "E1", u.Code(), "code")
	assert.Equal(t, "E1", u.String(), "print symbol")
}

func TestPeta(t *testing.T) {
	u := Peta(New("1", WithPrintSymbol("1")))
	assert.Equal(t, "P1", u.Code(), "code")
	assert.Equal(t, "P1", u.String(), "print symbol")
}

func TestTera(t *testing.T) {
	u := Tera(New("1", WithPrintSymbol("1")))
	assert.Equal(t, "T1", u.Code(), "code")
	assert.Equal(t, "T1", u.String(), "print symbol")
}

func TestGiga(t *testing.T) {
	u := Giga(New("1", WithPrintSymbol("1")))
	assert.Equal(t, "G1", u.Code(), "code")
	assert.Equal(t, "G1", u.String(), "print symbol")
}

func TestMega(t *testing.T) {
	u := Mega(New("1", WithPrintSymbol("1")))
	assert.Equal(t, "M1", u.Code(), "code")
	assert.Equal(t, "M1", u.String(), "print symbol")
}

func TestKilo(t *testing.T) {
	u := Kilo(New("1", WithPrintSymbol("1")))
	assert.Equal(t, "k1", u.Code(), "code")
	assert.Equal(t, "k1", u.String(), "print symbol")
}

func TestHecto(t *testing.T) {
	u := Hecto(New("1", WithPrintSymbol("1")))
	assert.Equal(t, "h1", u.Code(), "code")
	assert.Equal(t, "h1", u.String(), "print symbol")
}

func TestDeka(t *testing.T) {
	u := Deka(New("1", WithPrintSymbol("1")))
	assert.Equal(t, "da1", u.Code(), "code")
	assert.Equal(t, "da1", u.String(), "print symbol")
}

func TestDeci(t *testing.T) {
	u := Deci(New("1", WithPrintSymbol("1")))
	assert.Equal(t, "d1", u.Code(), "code")
	assert.Equal(t, "d1", u.String(), "print symbol")
}

func TestCenti(t *testing.T) {
	u := Centi(New("1", WithPrintSymbol("1")))
	assert.Equal(t, "c1", u.Code(), "code")
	assert.Equal(t, "c1", u.String(), "print symbol")
}

func TestMilli(t *testing.T) {
	u := Milli(New("1", WithPrintSymbol("1")))
	assert.Equal(t, "m1", u.Code(), "code")
	assert.Equal(t, "m1", u.String(), "print symbol")
}

func TestMicro(t *testing.T) {
	u := Micro(New("1", WithPrintSymbol("1")))
	assert.Equal(t, "u1", u.Code(), "code")
	assert.Equal(t, "Î¼1", u.String(), "print symbol")
}

func TestNano(t *testing.T) {
	u := Nano(New("1", WithPrintSymbol("1")))
	assert.Equal(t, "n1", u.Code(), "code")
	assert.Equal(t, "n1", u.String(), "print symbol")
}

func TestPico(t *testing.T) {
	u := Pico(New("1", WithPrintSymbol("1")))
	assert.Equal(t, "p1", u.Code(), "code")
	assert.Equal(t, "p1", u.String(), "print symbol")
}

func TestFemto(t *testing.T) {
	u := Femto(New("1", WithPrintSymbol("1")))
	assert.Equal(t, "f1", u.Code(), "code")
	assert.Equal(t, "f1", u.String(), "print symbol")
}

func TestAtto(t *testing.T) {
	u := Atto(New("1", WithPrintSymbol("1")))
	assert.Equal(t, "a1", u.Code(), "code")
	assert.Equal(t, "a1", u.String(), "print symbol")
}

func TestZepto(t *testing.T) {
	u := Zepto(New("1", WithPrintSymbol("1")))
	assert.Equal(t, "z1", u.Code(), "code")
	assert.Equal(t, "z1", u.String(), "print symbol")
}

func TestYocto(t *testing.T) {
	u := Yocto(New("1", WithPrintSymbol("1")))
	assert.Equal(t, "y1", u.Code(), "code")
	assert.Equal(t, "y1", u.String(), "print symbol")
}

func TestKibi(t *testing.T) {
	u := Kibi(New("1", WithPrintSymbol("1")))
	assert.Equal(t, "Ki1", u.Code(), "code")
	assert.Equal(t, "Ki1", u.String(), "print symbol")
}

func TestMebi(t *testing.T) {
	u := Mebi(New("1", WithPrintSymbol("1")))
	assert.Equal(t, "Mi1", u.Code(), "code")
	assert.Equal(t, "Mi1", u.String(), "print symbol")
}

func TestGibi(t *testing.T) {
	u := Gibi(New("1", WithPrintSymbol("1")))
	assert.Equal(t, "Gi1", u.Code(), "code")
	assert.Equal(t, "Gi1", u.String(), "print symbol")
}

func TestTebi(t *testing.T) {
	u := Tebi(New("1", WithPrintSymbol("1")))
	assert.Equal(t, "Ti1", u.Code(), "code")
	assert.Equal(t, "Ti1", u.String(), "print symbol")
}

